# -*- coding: utf-8 -*-

# colors
_dark_primary_color  = "#FBC02D"
_light_primary_color = "#FFF9C4"
_primary_color       = "#FFEB3B"
_success_color       = "#4CAF50"
_error_color         = "#CC6666"

# エディタ
import os
os.environ['EDITOR'] = '/usr/local/bin/vim'
os.environ['VISUAL'] = '/usr/local/bin/vim'

$XONSH_COLOR_STYLE = "native"
# 補完をEnterで直接実行しない
$COMPLETIONS_CONFIRM = True
# Tabではなく空白4つ
$INDENT = "    "
# 補完時に大小区別しない
$CASE_SENSITIVE_COMPLETIONS = False
# 連続重複コマンドを保存しない
$HISTCONTROL = "ignoredups"
# 括弧を補完
$XONSH_AUTOPAIR = True
# VIモード
$VI_MODE = True
# ディレクトリ名を入力でcd
$AUTO_CD = True
# エラー全て吐くように
$XONSH_SHOW_TRACEBACK = True
# サブプロセスタイムアウトのメッセージ抑制
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
# キー入力即評価
$UPDATE_COMPLETIONS_ON_KEYPRESS = False
# プロンプトの表記
$PROMPT_FIELDS['gitstatus_prefix'] = lambda: " {" + _light_primary_color +  "}on {" + _primary_color + "} " if os.path.exists(".git") else ""
$PROMPT_FIELDS['success_color'] = lambda: "{BOLD_" + _error_color + "}" if __xonsh__.history.rtns and __xonsh__.history.rtns[-1] != 0 else "{BOLD_" + _success_color + "}"
$PROMPT = "\n{" + _primary_color + "}{cwd}{gitstatus_prefix}{gitstatus}\n{success_color}❯❯ "
# $PROMPT = "{INTENSE_RED}{user}{INTENSE_GREEN}@{INTENSE_BLUE}{hostname}{INTENSE_YELLOW} [ {cwd} ] {INTENSE_BLUE}[ {gitstatus} {INTENSE_BLUE}] {GREEN}$ "
# Gitの表記
$XONSH_GITSTATUS_BRANCH = "{" + _primary_color + "}"
$XONSH_GITSTATUS_OPERATION = "{"+ _primary_color + "}"
# LSコマンドの出力の見た目
$LS_COLORS = "di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30"

#########
# alias #
#########

def _fbr():
  branch = $(git branch -vv | fzf +m --reverse | awk '{print $1}' | sed "s/.* //")
  command = "git checkout " + branch
  @(command.split())

def _fbrm():
  branch = $(git branch --all | grep -v HEAD | fzf +m --reverse | sed 's/.* //' | sed "s#remotes/[^/]*/##")
  command = "git checkout " + branch
  @(command.split())

import re
def _fshow():
  commit = $(git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" | fzf --ansi --no-sort --reverse --tiebreak=index)
  commit = re.search(r'[a-f0-9]{7}', commit)
  if commit is not None:
    command = "git show {} --color=always".format(commit.group(0))
    @(command.split())

def _fvd():
  target = $(echo @('\n'.join(list(filter(lambda x: '.git/' not in x, $(find ~/dotfiles/).split())))) | fzf +m --reverse)
  if target:
    command = "vim " + target
    @(command.split())

def _fssh():
  target = $(cat ~/.ssh/config | grep -i ^host | awk '{print $2}'| fzf --no-sort --reverse)
  if target:
    command = "ssh " + target
    @(command.split())

aliases['l'] = "lsd"
aliases['ls'] = "lsd"
aliases['la'] = "lsd -a"
aliases["v"] = "vim"
aliases["vi"] = "vim"
aliases["vb"] = "vim ~/.bashrc"
aliases["vx"] = "vim ~/.xonshrc"
aliases["vv"] = "vim ~/.vimrc"
aliases["vt"] = "vim ~/.tmux.conf"
aliases["vd"] = "vim ~/dotfiles/dein/plugins.toml"
aliases["vdl"] = "vim ~/dotfiles/dein/plugins_lazy.toml"
aliases["vt"] = "vim ~/.tmux.conf"
aliases["vh"] = "vim ~/dotfiles/.hyper.js"
aliases["vhw"] = "vim ~/dotfiles/.hyper.win.js"

aliases["fbr"] = _fbr
aliases["fbrm"] = _fbrm
aliases["fshow"] = _fshow
aliases["fvd"] = _fvd
aliases["fssh"] = _fssh

aliases["tmux"] = "~/Downloads/tmux/tmux"

# xontrib
# zコマンドの利用 pip install xontrib-z
xontrib load z

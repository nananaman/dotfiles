# -*- coding: utf-8 -*-

# エディタ
import os
os.environ['EDITOR'] = '/usr/local/bin/vim'
os.environ['VISUAL'] = '/usr/local/bin/vim'

$XONSH_COLOR_STYLE = "native"
# 補完をEnterで直接実行しない
$COMPLETIONS_CONFIRM = True
# Tabではなく空白4つ
$INDENT = "    "
# 補完時に大小区別しない
$CASE_SENSITIVE_COMPLETIONS = False
# 連続重複コマンドを保存しない
$HISTCONTROL = "ignoredups"
# 括弧を補完
$XONSH_AUTOPAIR = True
# VIモード
$VI_MODE = True
# ディレクトリ名を入力でcd
$AUTO_CD = True
# エラー全て吐くように
$XONSH_SHOW_TRACEBACK = True
# サブプロセスタイムアウトのメッセージ抑制
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
# キー入力即評価
$UPDATE_COMPLETIONS_ON_KEYPRESS = False
# プロンプトの表記
$PROMPT = "{INTENSE_RED}{user}{INTENSE_GREEN}@{INTENSE_BLUE}{hostname}{INTENSE_YELLOW} [ {cwd} ] {INTENSE_BLUE}[ {gitstatus} {INTENSE_BLUE}] {GREEN}$ "
# LSコマンドの出力の見た目
$LS_COLORS = "di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30"

#########
# alias #
#########

def _fh():
  if len(list(__xonsh__.history.items())) > 0:
    history = list(dict.fromkeys(filter(lambda command: command != "fh", map(lambda item: item["inp"], __xonsh__.history.items()))))
    if len(history) > 0 :
      history = "\n".join(history[::-1])
      command = $(echo @(history) | fzf +s +m)
      if command:
        @(command.split())

def _fbr():
  branch = $(git branch -vv | fzf +m | awk '{print $1}' | sed "s/.* //")
  command = "git checkout " + branch
  @(command.split())

def _fbrm():
  branch = $(git branch --all | grep -v HEAD | fzf +m | sed 's/.* //' | sed "s#remotes/[^/]*/##")
  command = "git checkout " + branch
  @(command.split())

import re
def _fshow():
  commit = $(git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" | fzf --ansi --no-sort --reverse --tiebreak=index)
  commit = re.search(r'[a-f0-9]{7}', commit)
  if commit is not None:
    command = "git show {} --color=always".format(commit.group(0))
    @(command.split())

aliases['l'] = "ls"
aliases['la'] = "ls -a"
aliases["v"] = "vim"
aliases["vi"] = "vim"
aliases["vb"] = "vim ~/.bashrc"
aliases["vx"] = "vim ~/.xonshrc"
aliases["vv"] = "vim ~/.vimrc"
aliases["vt"] = "vim ~/.tmux.conf"
aliases["vd"] = "vim ~/dotfiles/dein/plugins.toml"
aliases["vdl"] = "vim ~/dotfiles/dein/plugins_lazy.toml"
aliases["vt"] = "vim ~/.tmux.conf"

aliases["fh"] = _fh
aliases["fbr"] = _fbr
aliases["fbrm"] = _fbrm
aliases["fshow"] = _fshow

###############
# key binding #
###############

from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import Condition, EmacsInsertMode, ViInsertMode

@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    handler = bindings.add

    # コマンド入力中に<C-w>で記号、スペースの直前まで削除
    @handler(Keys.ControlW)
    def __ctrl_w(event):
        # 'event.current_buffer'から、現在のバッファを取り出す。
        buf = event.current_buffer # type: prompt_toolkif.buffer.Buffer
        text = buf.text[:buf.cursor_position] # type: str

        # バッファ中の文字から、削除したい文字数をカウントする。
        m = re.search(r"[/,.=\s][^/,.=\s]+[/,.=\s]?$", text)
        if m is not None:
            buf.delete_before_cursor(len(text) - m.start() - 1)
            return

        # 削除する
        buf.delete_before_cursor(len(text))

# xontrib
# zコマンドの利用 pip install xontrib-z
xontrib load z
# apt-getをtabで補完 pip install xonsh-apt-tabcomplete
xontrib load apt_tabcomplete

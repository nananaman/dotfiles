db.open\.\(".*"\)\.\(".*"\)$
	db, err := sql.Open({{$1}}, {{$2}})
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	{{_cursor_}}

db\.query\.\(.*\)$
	rows, err := db.Query({{$1}})
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	{{_cursor_}}

json\.encode\.\(\S\+\)\.\(\S\+\)$
	if err := json.NewEncoder({{$1}}).Encode({{$2}}); err != nil {
		{{_cursor_}}
	}

json\.decode\.\(\S\+\)\.\(\S\+\)$
	if err := json.NewDecoder({{$1}}).Decode({{$2}}); err != nil {
		{{_cursor_}}
	}

\(\S\+\)\.append\.\(\S\+\)$
	{{$1}} = append({{$1}}, {{$2}})
	{{_cursor_}}

http\.server\.\(\S\+\)$
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		{{_cursor_}}
	})
	log.Println("start http server :{{$1}}")
	log.Fatal(http.ListenAndServe(":{{$1}}", nil))

^main$
	package main

	func main() {
		{{_cursor_}}
	}

http\.get\.\(.*\)$
	url := {{$1}}

	req, _ := http.NewRequest("GET", url, nil)

	client := new(http.Client)
	res, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer response.Body.Close()

	byteArray, _ := ioutil.ReadAll(res.Body)
	body := string(byteArray)

	{{_cursor_}}

http\.post\.\(.*\)$
	url := {{$1}}

	req, _ := http.NewRequest("POST", url, {{_cursor_}})

  header := http.Header{}
  header.set("Content-Type", "application/json")

	client := new(http.Client)
	res, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer response.Body.Close()

	byteArray, _ := ioutil.ReadAll(res.Body)
	body := string(byteArray)
